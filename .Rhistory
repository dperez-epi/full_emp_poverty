hours = replace(hours, emp==0, 0), #Set hours to 0 if unemployed
phours1 = ifelse(hours>0 & !is.na(hours), yes=1, no=0)) %>%  #create positive hours indicator
set_value_labels(pwages = c('Positive wages' = 1, 'Zero wages' = 0),
pweekpay = c('Positive weekpay' = 1, 'Zero weekpay' = 0),
phours1 = c('Positive hours, primar' = 1, 'Zero hours' =0))
count(cpsorg$hoursvary0)
summary(cpsorg$hoursvary0)
count(cpsorg, hoursvary0)
set.seed(1017)
cps_filtered <- cpsorg %>%
filter(age<65) %>%
filter((emp==1 & phours1== 1 & pweekpay==1) | (emp==0 & phours1==0 & pweekpay==0)) %>%
mutate(index = runif(nrow(.), min = 0, max=1)) %>%  #assign each observation a random # between 0 and 1
arrange(year, realweekpay0, index) %>%  # sort by year, real weekly pay, and index (might be unnecessary)?
group_by(year) %>%
mutate(cumsum = cumsum(orgwgt/12), #column with cumulative sum of org weight
pop = sum(orgwgt/12), #column with total pop in each year
quint_pop = pop/5, # 1/5th of the weighted population by year
med_pop = pop/2) %>% # 1/2 of weighted pop by year
mutate(quint_bins = ifelse(cumsum <= quint_pop, 1,
ifelse(cumsum > quint_pop & cumsum <= quint_pop*2, 2,
ifelse(cumsum > quint_pop*2 & cumsum <= quint_pop*3, 3,
ifelse(cumsum > quint_pop*3 & cumsum <= quint_pop*4, 4, 5))))) %>%
mutate(med_bins = ifelse(cumsum <= med_pop, yes=1, no=2)) %>%
ungroup()
quint_cutoffs <- cps_filtered %>%
group_by(year, quint_bins) %>%
summarize(avg_weekpay_cutoff = max(realweekpay0)) %>%
pivot_wider(id_cols = year, names_from = quint_bins, values_from = avg_weekpay_cutoff)
med_cutoffs <- cps_filtered %>%
group_by(year, med_bins) %>%
summarize(avg_weekpay_cutoff = max(realweekpay0)) %>%
pivot_wider(id_cols = year, names_from = med_bins, values_from = avg_weekpay_cutoff)
quintile_metrics <- cps_filtered %>%
group_by(year, quint_bins) %>%
summarize(avg_weekpay = weighted.mean(realweekpay0, w=wgt),
epop = weighted.mean(emp, w=wgt),
avg_hours = weighted.mean(hours, w=wgt),
avg_wage = weighted.mean(realwage0, w=wgt),
n = n(),
wgt_n = sum(orgwgt/12)) %>%
pivot_wider(id_cols = year, names_from = quint_bins, values_from = c(avg_wage, avg_hours, avg_weekpay, epop, n, wgt_n))
median_metrics <- cps_filtered %>%
group_by(year, med_bins) %>%
summarize(avg_weekpay = weighted.mean(realweekpay0, w=wgt),
epop = weighted.mean(emp, w=wgt),
avg_hours = weighted.mean(hours, w=wgt),
avg_wage = weighted.mean(realwage0, w=wgt),
n = n(),
wgt_n = sum(orgwgt/12)) %>%
pivot_wider(id_cols = year, names_from = med_bins, values_from = c(avg_wage, avg_hours, avg_weekpay, epop, n, wgt_n))
rand_order <- createWorkbook()
pct = createStyle(numFmt = '0.0%')
acct = createStyle(numFmt = '#,#0.0')
currency = createStyle(numFmt = '$#,#0.00')
hs2 <- createStyle(fgFill = "#bfbfbf", halign = "CENTER", textDecoration = "Bold",
border = "Bottom", fontColour = "black")
addWorksheet(rand_order, sheetName = "Quintile metrics")
addWorksheet(rand_order, sheetName = "Median metrics")
addWorksheet(rand_order, sheetName = "Quint cutoffs")
addWorksheet(rand_order, sheetName = "Median cutoffs")
writeData(rand_order, quintile_metrics, headerStyle = hs2, sheet = "Quintile metrics", startCol = 1, startRow = 1, colNames = TRUE)
writeData(rand_order, median_metrics, headerStyle = hs2, sheet = "Median metrics", startCol = 1, startRow = 1, colNames = TRUE)
writeData(rand_order, quint_cutoffs, headerStyle = hs2, sheet = "Quint cutoffs", startCol = 1, startRow = 1, colNames = TRUE)
writeData(rand_order, med_cutoffs, headerStyle = hs2, sheet = "Median cutoffs", startCol = 1, startRow = 1, colNames = TRUE)
# #Currency format
# addStyle(rand_order, "Quintile metrics", style=currency, cols=c(2:27,80:105), rows=2:(nrow(quintile_metrics)+1), gridExpand=TRUE)
# addStyle(rand_order, "Median metrics", style=currency, cols=c(2:27,80:105), rows=2:(nrow(median_metrics)+1), gridExpand=TRUE)
#
# #Percent format
# addStyle(rand_order, "Quintile metrics", style=pct, cols=c(28:53), rows=2:(nrow(quintile_metrics)+1), gridExpand=TRUE)
# addStyle(rand_order, "Median metrics", style=pct, cols=c(28:53), rows=2:(nrow(median_metrics)+1), gridExpand=TRUE)
#
# #accounting format
# addStyle(rand_order, "Quintile metrics", style=acct, cols=c(54:79,106:157), rows=2:(nrow(quintile_metrics)+1), gridExpand=TRUE)
# addStyle(rand_order, "Median metrics", style=acct, cols=c(54:79,106:157), rows=2:(nrow(median_metrics)+1), gridExpand=TRUE)
saveWorkbook(rand_order, paste0("/data/metrics_", format(Sys.time(), "%d-%b-%Y %H.%M"), ".xlsx"))
#1994 is the lower bound year since hoursu1i is available 1994-present
#if we use hoursuorg, we can go back to 1979. However, variable coding changes in 1994 so may be inconsistent
cpsorg <-load_org(1994:2019, year, month, orgwgt, hhid, personid, statefips, age, emp, selfemp, selfinc, hourslw1, hoursu1i, hoursuorg, hoursvary, multjobs, lfstat, wage, earnhour) %>%
filter(age>=16, emp %in% c(0,1)) %>%
mutate(wgt = orgwgt/12) %>%
#create new version of selfemp/selfinc to exclude self employer workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
hoursvary0 = ifelse(hoursvary==1 & !is.na(hoursvary), yes=1, no=0)) %>%
mutate(hours = hoursu1i) %>%
filter(selfemp0==0, selfemp0==0, hoursvary0==0) %>%
#Merge CPI-U-RS data
left_join(cpi, by='year') %>%
mutate(realwage = wage*(cpi_base/cpiurs), # inflation adjust wages to 2019$
realweekpay = realwage0 * hours, #generate a weekly pay variable
pwages = ifelse(realwage>0 & !is.na(realwage) , yes=1, no=0), #create positive wage indicator
pweekpay = ifelse(realweekpay>0 & !is.na(realweekpay) , yes=1, no=0), #create positive weekpay indicator
hours = replace(hours, emp==0, 0), #Set hours to 0 if unemployed
phours1 = ifelse(hours>0 & !is.na(hours), yes=1, no=0)) %>%  #create positive hours indicator
set_value_labels(pwages = c('Positive wages' = 1, 'Zero wages' = 0),
pweekpay = c('Positive weekpay' = 1, 'Zero weekpay' = 0),
phours1 = c('Positive hours, primar' = 1, 'Zero hours' =0))
#1994 is the lower bound year since hoursu1i is available 1994-present
#if we use hoursuorg, we can go back to 1979. However, variable coding changes in 1994 so may be inconsistent
cpsorg <-load_org(1994:2019, year, month, orgwgt, hhid, personid, statefips, age, emp, selfemp, selfinc, hourslw1, hoursu1i, hoursuorg, hoursvary, multjobs, lfstat, wage, earnhour) %>%
filter(age>=16, emp %in% c(0,1)) %>%
mutate(wgt = orgwgt/12) %>%
#create new version of selfemp/selfinc to exclude self employer workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
hoursvary0 = ifelse(hoursvary==1 & !is.na(hoursvary), yes=1, no=0)) %>%
mutate(hours = hoursu1i) %>%
filter(selfemp0==0, selfemp0==0, hoursvary0==0) %>%
#Merge CPI-U-RS data
left_join(cpi, by='year') %>%
mutate(hours = replace(hours, emp==0, 0), #Set hours to 0 if unemployed
realwage = wage*(cpi_base/cpiurs), # inflation adjust wages to 2019$
realweekpay = realwage0 * hours, #generate a weekly pay variable
pwages = ifelse(realwage>0 & !is.na(realwage) , yes=1, no=0), #create positive wage indicator
pweekpay = ifelse(realweekpay>0 & !is.na(realweekpay) , yes=1, no=0), #create positive weekpay indicator
phours1 = ifelse(hours>0 & !is.na(hours), yes=1, no=0)) %>%  #create positive hours indicator
set_value_labels(pwages = c('Positive wages' = 1, 'Zero wages' = 0),
pweekpay = c('Positive weekpay' = 1, 'Zero weekpay' = 0),
phours1 = c('Positive hours, primar' = 1, 'Zero hours' =0))
#1994 is the lower bound year since hoursu1i is available 1994-present
#if we use hoursuorg, we can go back to 1979. However, variable coding changes in 1994 so may be inconsistent
cpsorg <-load_org(1994:2019, year, month, orgwgt, hhid, personid, statefips, age, emp, selfemp, selfinc, hourslw1, hoursu1i, hoursuorg, hoursvary, multjobs, lfstat, wage, earnhour) %>%
filter(age>=16, emp %in% c(0,1)) %>%
mutate(wgt = orgwgt/12) %>%
#create new version of selfemp/selfinc to exclude self employer workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
hoursvary0 = ifelse(hoursvary==1 & !is.na(hoursvary), yes=1, no=0)) %>%
mutate(hours = hoursu1i) %>%
filter(selfemp0==0, selfemp0==0, hoursvary0==0) %>%
#Merge CPI-U-RS data
left_join(cpi, by='year') %>%
mutate(hours = replace(hours, emp==0, 0), #Set hours to 0 if unemployed
realwage = wage*(cpi_base/cpiurs), # inflation adjust wages to 2019$
realweekpay = realwage * hours, #generate a weekly pay variable
pwages = ifelse(realwage>0 & !is.na(realwage) , yes=1, no=0), #create positive wage indicator
pweekpay = ifelse(realweekpay>0 & !is.na(realweekpay) , yes=1, no=0), #create positive weekpay indicator
phours1 = ifelse(hours>0 & !is.na(hours), yes=1, no=0)) %>%  #create positive hours indicator
set_value_labels(pwages = c('Positive wages' = 1, 'Zero wages' = 0),
pweekpay = c('Positive weekpay' = 1, 'Zero weekpay' = 0),
phours1 = c('Positive hours, primar' = 1, 'Zero hours' =0))
set.seed(1017)
cps_filtered <- cpsorg %>%
filter(age<65) %>%
filter((emp==1 & phours1== 1 & pweekpay==1) | (emp==0 & phours1==0 & pweekpay==0)) %>%
mutate(index = runif(nrow(.), min = 0, max=1)) %>%  #assign each observation a random # between 0 and 1
arrange(year, realweekpay0, index) %>%  # sort by year, real weekly pay, and index (might be unnecessary)?
group_by(year) %>%
mutate(cumsum = cumsum(orgwgt/12), #column with cumulative sum of org weight
pop = sum(orgwgt/12), #column with total pop in each year
quint_pop = pop/5, # 1/5th of the weighted population by year
med_pop = pop/2) %>% # 1/2 of weighted pop by year
mutate(quint_bins = ifelse(cumsum <= quint_pop, 1,
ifelse(cumsum > quint_pop & cumsum <= quint_pop*2, 2,
ifelse(cumsum > quint_pop*2 & cumsum <= quint_pop*3, 3,
ifelse(cumsum > quint_pop*3 & cumsum <= quint_pop*4, 4, 5))))) %>%
mutate(med_bins = ifelse(cumsum <= med_pop, yes=1, no=2)) %>%
ungroup()
set.seed(1017)
cps_filtered <- cpsorg %>%
filter(age<65) %>%
filter((emp==1 & phours1== 1 & pweekpay==1) | (emp==0 & phours1==0 & pweekpay==0)) %>%
mutate(index = runif(nrow(.), min = 0, max=1)) %>%  #assign each observation a random # between 0 and 1
arrange(year, realweekpay, index) %>%  # sort by year, real weekly pay, and index (might be unnecessary)?
group_by(year) %>%
mutate(cumsum = cumsum(orgwgt/12), #column with cumulative sum of org weight
pop = sum(orgwgt/12), #column with total pop in each year
quint_pop = pop/5, # 1/5th of the weighted population by year
med_pop = pop/2) %>% # 1/2 of weighted pop by year
mutate(quint_bins = ifelse(cumsum <= quint_pop, 1,
ifelse(cumsum > quint_pop & cumsum <= quint_pop*2, 2,
ifelse(cumsum > quint_pop*2 & cumsum <= quint_pop*3, 3,
ifelse(cumsum > quint_pop*3 & cumsum <= quint_pop*4, 4, 5))))) %>%
mutate(med_bins = ifelse(cumsum <= med_pop, yes=1, no=2)) %>%
ungroup()
quint_cutoffs <- cps_filtered %>%
group_by(year, quint_bins) %>%
summarize(avg_weekpay_cutoff = max(realweekpay)) %>%
pivot_wider(id_cols = year, names_from = quint_bins, values_from = avg_weekpay_cutoff)
med_cutoffs <- cps_filtered %>%
group_by(year, med_bins) %>%
summarize(avg_weekpay_cutoff = max(realweekpay)) %>%
pivot_wider(id_cols = year, names_from = med_bins, values_from = avg_weekpay_cutoff)
quintile_metrics <- cps_filtered %>%
group_by(year, quint_bins) %>%
summarize(avg_weekpay = weighted.mean(realweekpay, w=wgt),
epop = weighted.mean(emp, w=wgt),
avg_hours = weighted.mean(hours, w=wgt),
avg_wage = weighted.mean(realwage0, w=wgt),
n = n(),
wgt_n = sum(orgwgt/12)) %>%
pivot_wider(id_cols = year, names_from = quint_bins, values_from = c(avg_wage, avg_hours, avg_weekpay, epop, n, wgt_n))
set.seed(1017)
cps_filtered <- cpsorg %>%
filter(age<65) %>%
filter((emp==1 & phours1== 1 & pweekpay==1) | (emp==0 & phours1==0 & pweekpay==0)) %>%
mutate(index = runif(nrow(.), min = 0, max=1)) %>%  #assign each observation a random # between 0 and 1
arrange(year, realweekpay, index) %>%  # sort by year, real weekly pay, and index (might be unnecessary)?
group_by(year) %>%
mutate(cumsum = cumsum(orgwgt/12), #column with cumulative sum of org weight
pop = sum(orgwgt/12), #column with total pop in each year
quint_pop = pop/5, # 1/5th of the weighted population by year
med_pop = pop/2) %>% # 1/2 of weighted pop by year
mutate(quint_bins = ifelse(cumsum <= quint_pop, 1,
ifelse(cumsum > quint_pop & cumsum <= quint_pop*2, 2,
ifelse(cumsum > quint_pop*2 & cumsum <= quint_pop*3, 3,
ifelse(cumsum > quint_pop*3 & cumsum <= quint_pop*4, 4, 5))))) %>%
mutate(med_bins = ifelse(cumsum <= med_pop, yes=1, no=2)) %>%
ungroup()
quint_cutoffs <- cps_filtered %>%
group_by(year, quint_bins) %>%
summarize(avg_weekpay_cutoff = max(realweekpay)) %>%
pivot_wider(id_cols = year, names_from = quint_bins, values_from = avg_weekpay_cutoff)
med_cutoffs <- cps_filtered %>%
group_by(year, med_bins) %>%
summarize(avg_weekpay_cutoff = max(realweekpay)) %>%
pivot_wider(id_cols = year, names_from = med_bins, values_from = avg_weekpay_cutoff)
quintile_metrics <- cps_filtered %>%
group_by(year, quint_bins) %>%
summarize(avg_weekpay = weighted.mean(realweekpay, w=wgt),
epop = weighted.mean(emp, w=wgt),
avg_hours = weighted.mean(hours, w=wgt),
avg_wage = weighted.mean(realwage, w=wgt),
n = n(),
wgt_n = sum(orgwgt/12)) %>%
pivot_wider(id_cols = year, names_from = quint_bins, values_from = c(avg_wage, avg_hours, avg_weekpay, epop, n, wgt_n))
median_metrics <- cps_filtered %>%
group_by(year, med_bins) %>%
summarize(avg_weekpay = weighted.mean(realweekpay, w=wgt),
epop = weighted.mean(emp, w=wgt),
avg_hours = weighted.mean(hours, w=wgt),
avg_wage = weighted.mean(realwage, w=wgt),
n = n(),
wgt_n = sum(orgwgt/12)) %>%
pivot_wider(id_cols = year, names_from = med_bins, values_from = c(avg_wage, avg_hours, avg_weekpay, epop, n, wgt_n))
quintile_metrics <- cps_filtered %>%
group_by(year, quint_bins) %>%
summarize(avg_weekpay = weighted.mean(realweekpay, w=wgt, na.rm=TRUE),
epop = weighted.mean(emp, w=wgt),
avg_hours = weighted.mean(hours, w=wgt),
avg_wage = weighted.mean(realwage, w=wgt),
n = n(),
wgt_n = sum(orgwgt/12)) %>%
pivot_wider(id_cols = year, names_from = quint_bins, values_from = c(avg_wage, avg_hours, avg_weekpay, epop, n, wgt_n))
median_metrics <- cps_filtered %>%
group_by(year, med_bins) %>%
summarize(avg_weekpay = weighted.mean(realweekpay, w=wgt, na.rm=TRUE),
epop = weighted.mean(emp, w=wgt),
avg_hours = weighted.mean(hours, w=wgt),
avg_wage = weighted.mean(realwage, w=wgt),
n = n(),
wgt_n = sum(orgwgt/12)) %>%
pivot_wider(id_cols = year, names_from = med_bins, values_from = c(avg_wage, avg_hours, avg_weekpay, epop, n, wgt_n))
#1994 is the lower bound year since hoursu1i is available 1994-present
#if we use hoursuorg, we can go back to 1979. However, variable coding changes in 1994 so may be inconsistent
cpsorg <-load_org(1994:2019, year, month, orgwgt, hhid, personid, statefips, age, emp, selfemp, selfinc, hourslw1, hoursu1i, hoursuorg, hoursvary, multjobs, lfstat, wage, earnhour) %>%
filter(age>=16, emp %in% c(0,1)) %>%
mutate(wgt = orgwgt/12) %>%
#create new version of selfemp/selfinc to exclude self employer workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
hoursvary0 = ifelse(hoursvary==1 & !is.na(hoursvary), yes=1, no=0)) %>%
mutate(hours = hoursu1i) %>%
filter(selfemp0==0, selfemp0==0, hoursvary0==0) %>%
#Merge CPI-U-RS data
left_join(cpi, by='year') %>%
mutate(hours = replace(hours, emp==0, 0), #Set hours to 0 if unemployed
realwage = wage*(cpi_base/cpiurs), # inflation adjust wages to 2019$
realweekpay = realwage * hours, #generate a weekly pay variable
pwages = ifelse(realwage>0 & !is.na(realwage) , yes=1, no=0), #create positive wage indicator
pweekpay = ifelse(realweekpay>0 & !is.na(realweekpay) , yes=1, no=0), #create positive weekpay indicator
phours1 = ifelse(hours>0 & !is.na(hours), yes=1, no=0)) %>%  #create positive hours indicator
set_value_labels(pwages = c('Positive wages' = 1, 'Zero wages' = 0),
pweekpay = c('Positive weekpay' = 1, 'Zero weekpay' = 0),
phours1 = c('Positive hours, primar' = 1, 'Zero hours' =0))
count(cpsorg, hoursvary0)
count(cpsorg, hoursvary)
#1994 is the lower bound year since hoursu1i is available 1994-present
#if we use hoursuorg, we can go back to 1979. However, variable coding changes in 1994 so may be inconsistent
cpsorg <-load_org(1994:2019, year, month, orgwgt, hhid, personid, statefips, age, emp, selfemp, selfinc, hourslw1, hoursu1i, hoursuorg, hoursvary, multjobs, lfstat, wage, earnhour) %>%
filter(age>=16, emp %in% c(0,1)) %>%
mutate(wgt = orgwgt/12) %>%
#create new version of selfemp/selfinc to exclude self employer workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
hoursvary0 = ifelse(hoursvary==1, yes=1, no=0)) %>%
mutate(hours = hoursu1i) %>%
filter(selfemp0==0, selfemp0==0, hoursvary0==0) %>%
#Merge CPI-U-RS data
left_join(cpi, by='year') %>%
mutate(hours = replace(hours, emp==0, 0), #Set hours to 0 if unemployed
realwage = wage*(cpi_base/cpiurs), # inflation adjust wages to 2019$
realweekpay = realwage * hours, #generate a weekly pay variable
pwages = ifelse(realwage>0 & !is.na(realwage) , yes=1, no=0), #create positive wage indicator
pweekpay = ifelse(realweekpay>0 & !is.na(realweekpay) , yes=1, no=0), #create positive weekpay indicator
phours1 = ifelse(hours>0 & !is.na(hours), yes=1, no=0)) %>%  #create positive hours indicator
set_value_labels(pwages = c('Positive wages' = 1, 'Zero wages' = 0),
pweekpay = c('Positive weekpay' = 1, 'Zero weekpay' = 0),
phours1 = c('Positive hours, primar' = 1, 'Zero hours' =0))
count(cpsorg,hoursvary0)
count(cpsorg,hoursvary0)
#1994 is the lower bound year since hoursu1i is available 1994-present
#if we use hoursuorg, we can go back to 1979. However, variable coding changes in 1994 so may be inconsistent
cpsorg <-load_org(1994:2019, year, month, orgwgt, hhid, personid, statefips, age, emp, selfemp, selfinc, hourslw1, hoursu1i, hoursuorg, hoursvary, multjobs, lfstat, wage, earnhour) %>%
filter(age>=16, emp %in% c(0,1)) %>%
mutate(wgt = orgwgt/12) %>%
#create new version of selfemp/selfinc to exclude self employer workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
hoursvary0 = ifelse(hoursvary==1, yes=1, no=0)) %>%
mutate(hours = hoursu1i) %>%
filter(selfemp0==0, selfemp0==0) %>%
#Merge CPI-U-RS data
left_join(cpi, by='year') %>%
mutate(hours = replace(hours, emp==0, 0), #Set hours to 0 if unemployed
realwage = wage*(cpi_base/cpiurs), # inflation adjust wages to 2019$
realweekpay = realwage * hours, #generate a weekly pay variable
pwages = ifelse(realwage>0 & !is.na(realwage) , yes=1, no=0), #create positive wage indicator
pweekpay = ifelse(realweekpay>0 & !is.na(realweekpay) , yes=1, no=0), #create positive weekpay indicator
phours1 = ifelse(hours>0 & !is.na(hours), yes=1, no=0)) %>%  #create positive hours indicator
set_value_labels(pwages = c('Positive wages' = 1, 'Zero wages' = 0),
pweekpay = c('Positive weekpay' = 1, 'Zero weekpay' = 0),
phours1 = c('Positive hours, primar' = 1, 'Zero hours' =0))
> count(cpsorg,hoursvary0)
count(cpsorg,hoursvary0)
#1994 is the lower bound year since hoursu1i is available 1994-present
#if we use hoursuorg, we can go back to 1979. However, variable coding changes in 1994 so may be inconsistent
cpsorg <-load_org(1994:2019, year, month, orgwgt, hhid, personid, statefips, age, emp, selfemp, selfinc, hourslw1, hoursu1i, hoursuorg, hoursvary, multjobs, lfstat, wage, earnhour) %>%
filter(age>=16, emp %in% c(0,1)) %>%
mutate(wgt = orgwgt/12) %>%
#create new version of selfemp/selfinc to exclude self employer workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
hoursvary0 = ifelse(hoursvary==1, yes=1, no=0)) %>%
mutate(hours = hoursu1i) %>%
filter(selfemp0==0, selfemp0==0, hoursvary0==0) %>%
#Merge CPI-U-RS data
left_join(cpi, by='year') %>%
mutate(hours = replace(hours, emp==0, 0), #Set hours to 0 if unemployed
realwage = wage*(cpi_base/cpiurs), # inflation adjust wages to 2019$
realweekpay = realwage * hours, #generate a weekly pay variable
pwages = ifelse(realwage>0 & !is.na(realwage) , yes=1, no=0), #create positive wage indicator
pweekpay = ifelse(realweekpay>0 & !is.na(realweekpay) , yes=1, no=0), #create positive weekpay indicator
phours1 = ifelse(hours>0 & !is.na(hours), yes=1, no=0)) %>%  #create positive hours indicator
set_value_labels(pwages = c('Positive wages' = 1, 'Zero wages' = 0),
pweekpay = c('Positive weekpay' = 1, 'Zero weekpay' = 0),
phours1 = c('Positive hours, primar' = 1, 'Zero hours' =0))
count(cpsorg,hoursvary0)
summary(cpsorg$hoursvary0)
#1994 is the lower bound year since hoursu1i is available 1994-present
#if we use hoursuorg, we can go back to 1979. However, variable coding changes in 1994 so may be inconsistent
cpsorg <-load_org(1994:2019, year, month, orgwgt, hhid, personid, statefips, age, emp, selfemp, selfinc, hourslw1, hoursu1i, hoursuorg, hoursvary, multjobs, lfstat, wage, earnhour) %>%
filter(age>=16, emp %in% c(0,1)) %>%
mutate(wgt = orgwgt/12) %>%
#create new version of selfemp/selfinc to exclude self employer workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
hoursvary0 = ifelse(hoursvary==1 & !is.na(hoursvary), yes=1, no=0)) %>%
mutate(hours = hoursu1i) %>%
filter(selfemp0==0, selfemp0==0, hoursvary0==1) %>%
#Merge CPI-U-RS data
left_join(cpi, by='year') %>%
mutate(hours = replace(hours, emp==0, 0), #Set hours to 0 if unemployed
realwage = wage*(cpi_base/cpiurs), # inflation adjust wages to 2019$
realweekpay = realwage * hours, #generate a weekly pay variable
pwages = ifelse(realwage>0 & !is.na(realwage) , yes=1, no=0), #create positive wage indicator
pweekpay = ifelse(realweekpay>0 & !is.na(realweekpay) , yes=1, no=0), #create positive weekpay indicator
phours1 = ifelse(hours>0 & !is.na(hours), yes=1, no=0)) %>%  #create positive hours indicator
set_value_labels(pwages = c('Positive wages' = 1, 'Zero wages' = 0),
pweekpay = c('Positive weekpay' = 1, 'Zero weekpay' = 0),
phours1 = c('Positive hours, primar' = 1, 'Zero hours' =0))
count(cpsorg,hoursvary0)
#1994 is the lower bound year since hoursu1i is available 1994-present
#if we use hoursuorg, we can go back to 1979. However, variable coding changes in 1994 so may be inconsistent
cpsorg <-load_org(1994:2019, year, month, orgwgt, hhid, personid, statefips, age, emp, selfemp, selfinc, hourslw1, hoursu1i, hoursuorg, hoursvary, multjobs, lfstat, wage, earnhour) %>%
filter(age>=16, emp %in% c(0,1)) %>%
mutate(wgt = orgwgt/12) %>%
#create new version of selfemp/selfinc to exclude self employer workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
hoursvary0 = ifelse(hoursvary==1 & !is.na(hoursvary), yes=1, no=0)) %>%
mutate(hours = hoursu1i) %>%
filter(selfemp0==0, selfemp0==0, hoursvary0==0) %>%
#Merge CPI-U-RS data
left_join(cpi, by='year') %>%
mutate(hours = replace(hours, emp==0, 0), #Set hours to 0 if unemployed
realwage = wage*(cpi_base/cpiurs), # inflation adjust wages to 2019$
realweekpay = realwage * hours, #generate a weekly pay variable
pwages = ifelse(realwage>0 & !is.na(realwage) , yes=1, no=0), #create positive wage indicator
pweekpay = ifelse(realweekpay>0 & !is.na(realweekpay) , yes=1, no=0), #create positive weekpay indicator
phours1 = ifelse(hours>0 & !is.na(hours), yes=1, no=0)) %>%  #create positive hours indicator
set_value_labels(pwages = c('Positive wages' = 1, 'Zero wages' = 0),
pweekpay = c('Positive weekpay' = 1, 'Zero weekpay' = 0),
phours1 = c('Positive hours, primar' = 1, 'Zero hours' =0))
count(cpsorg,hoursvary0)
#1994 is the lower bound year since hoursu1i is available 1994-present
#if we use hoursuorg, we can go back to 1979. However, variable coding changes in 1994 so may be inconsistent
cpsorg <-load_org(1994:2019, year, month, orgwgt, hhid, personid, statefips, age, emp, selfemp, selfinc, hourslw1, hoursu1i, hoursuorg, hoursvary, multjobs, lfstat, wage, earnhour) %>%
filter(age>=16, emp %in% c(0,1)) %>%
mutate(wgt = orgwgt/12) %>%
#create new version of selfemp/selfinc to exclude self employer workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
hoursvary0 = ifelse(hoursvary==1 & !is.na(hoursvary), yes=1, no=0)) %>%
mutate(hours = hoursu1i) %>%
filter(selfemp0==0, selfemp0==0, hoursvary0==0) %>%
#Merge CPI-U-RS data
left_join(cpi, by='year') %>%
mutate(hours = replace(hours, emp==0, 0), #Set hours to 0 if unemployed
realwage = wage*(cpi_base/cpiurs), # inflation adjust wages to 2019$
realweekpay = realwage * hours, #generate a weekly pay variable
pwages = ifelse(realwage>0 & !is.na(realwage) , yes=1, no=0), #create positive wage indicator
pweekpay = ifelse(realweekpay>0 & !is.na(realweekpay) , yes=1, no=0), #create positive weekpay indicator
phours1 = ifelse(hours>0 & !is.na(hours), yes=1, no=0)) %>%  #create positive hours indicator
set_value_labels(pwages = c('Positive wages' = 1, 'Zero wages' = 0),
pweekpay = c('Positive weekpay' = 1, 'Zero weekpay' = 0),
phours1 = c('Positive hours, primar' = 1, 'Zero hours' =0))
#1994 is the lower bound year since hoursu1i is available 1994-present
#if we use hoursuorg, we can go back to 1979. However, variable coding changes in 1994 so may be inconsistent
cpsorg <-load_org(1994:2019, year, month, orgwgt, hhid, personid, statefips, age, emp, selfemp, selfinc, hourslw1, hoursu1i, hoursuorg, hoursvary, multjobs, lfstat, wage, earnhour) %>%
filter(age>=16, emp %in% c(0,1)) %>%
mutate(wgt = orgwgt/12) %>%
#create new version of selfemp/selfinc to exclude self employer workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
hoursvary0 = ifelse(hoursvary==1 & !is.na(hoursvary), yes=1, no=0)) %>%
mutate(hours = hoursu1i) %>%
filter(selfemp0==0, selfemp0==0, hoursvary0==0) %>%
#Merge CPI-U-RS data
left_join(cpi, by='year') %>%
mutate(hours = replace(hours, emp==0, 0), #Set hours to 0 if unemployed,
realwage = wage*(cpi_base/cpiurs), # inflation adjust wages to 2019$
realwage0 = replace(realwage, emp==0, 0), #Set unemployed workers' wages to 0
realweekpay = realwage0 * hours, #generate a weekly pay variable
realweekpay0 = replace(realweekpay, emp==0, 0),
pwages = ifelse(realwage0>0 & !is.na(realwage0) , yes=1, no=0), #create positive wage indicator
pweekpay = ifelse(realweekpay0>0 & !is.na(realweekpay0) , yes=1, no=0), #create positive weekpay indicator
phours1 = ifelse(hours>0 & !is.na(hours), yes=1, no=0)) %>%  #create positive hours indicator
set_value_labels(pwages = c('Positive wages' = 1, 'Zero wages' = 0),
pweekpay = c('Positive weekpay' = 1, 'Zero weekpay' = 0),
phours1 = c('Positive hours, primar' = 1, 'Zero hours' =0))
set.seed(1017)
cps_filtered <- cpsorg %>%
filter(age<65) %>%
filter((emp==1 & phours1== 1 & pweekpay==1) | (emp==0 & phours1==0 & pweekpay==0)) %>%
mutate(index = runif(nrow(.), min = 0, max=1)) %>%  #assign each observation a random # between 0 and 1
arrange(year, realweekpay0, index) %>%  # sort by year, real weekly pay, and index (might be unnecessary)?
group_by(year) %>%
mutate(cumsum = cumsum(orgwgt/12), #column with cumulative sum of org weight
pop = sum(orgwgt/12), #column with total pop in each year
quint_pop = pop/5, # 1/5th of the weighted population by year
med_pop = pop/2) %>% # 1/2 of weighted pop by year
mutate(quint_bins = ifelse(cumsum <= quint_pop, 1,
ifelse(cumsum > quint_pop & cumsum <= quint_pop*2, 2,
ifelse(cumsum > quint_pop*2 & cumsum <= quint_pop*3, 3,
ifelse(cumsum > quint_pop*3 & cumsum <= quint_pop*4, 4, 5))))) %>%
mutate(med_bins = ifelse(cumsum <= med_pop, yes=1, no=2)) %>%
ungroup()
quint_cutoffs <- cps_filtered %>%
group_by(year, quint_bins) %>%
summarize(avg_weekpay_cutoff = max(realweekpay0)) %>%
pivot_wider(id_cols = year, names_from = quint_bins, values_from = avg_weekpay_cutoff)
med_cutoffs <- cps_filtered %>%
group_by(year, med_bins) %>%
summarize(avg_weekpay_cutoff = max(realweekpay0)) %>%
pivot_wider(id_cols = year, names_from = med_bins, values_from = avg_weekpay_cutoff)
quintile_metrics <- cps_filtered %>%
group_by(year, quint_bins) %>%
summarize(avg_weekpay = weighted.mean(realweekpay0, w=wgt),
epop = weighted.mean(emp, w=wgt),
avg_hours = weighted.mean(hours, w=wgt),
avg_wage = weighted.mean(realwage0, w=wgt),
n = n(),
wgt_n = sum(orgwgt/12)) %>%
pivot_wider(id_cols = year, names_from = quint_bins, values_from = c(avg_wage, avg_hours, avg_weekpay, epop, n, wgt_n))
median_metrics <- cps_filtered %>%
group_by(year, med_bins) %>%
summarize(avg_weekpay = weighted.mean(realweekpay0, w=wgt),
epop = weighted.mean(emp, w=wgt),
avg_hours = weighted.mean(hours, w=wgt),
avg_wage = weighted.mean(realwage0, w=wgt),
n = n(),
wgt_n = sum(orgwgt/12)) %>%
pivot_wider(id_cols = year, names_from = med_bins, values_from = c(avg_wage, avg_hours, avg_weekpay, epop, n, wgt_n))
rand_order <- createWorkbook()
pct = createStyle(numFmt = '0.0%')
acct = createStyle(numFmt = '#,#0.0')
currency = createStyle(numFmt = '$#,#0.00')
hs2 <- createStyle(fgFill = "#bfbfbf", halign = "CENTER", textDecoration = "Bold",
border = "Bottom", fontColour = "black")
addWorksheet(rand_order, sheetName = "Quintile metrics")
addWorksheet(rand_order, sheetName = "Median metrics")
addWorksheet(rand_order, sheetName = "Quint cutoffs")
addWorksheet(rand_order, sheetName = "Median cutoffs")
writeData(rand_order, quintile_metrics, headerStyle = hs2, sheet = "Quintile metrics", startCol = 1, startRow = 1, colNames = TRUE)
writeData(rand_order, median_metrics, headerStyle = hs2, sheet = "Median metrics", startCol = 1, startRow = 1, colNames = TRUE)
writeData(rand_order, quint_cutoffs, headerStyle = hs2, sheet = "Quint cutoffs", startCol = 1, startRow = 1, colNames = TRUE)
writeData(rand_order, med_cutoffs, headerStyle = hs2, sheet = "Median cutoffs", startCol = 1, startRow = 1, colNames = TRUE)
# #Currency format
# addStyle(rand_order, "Quintile metrics", style=currency, cols=c(2:27,80:105), rows=2:(nrow(quintile_metrics)+1), gridExpand=TRUE)
# addStyle(rand_order, "Median metrics", style=currency, cols=c(2:27,80:105), rows=2:(nrow(median_metrics)+1), gridExpand=TRUE)
#
# #Percent format
# addStyle(rand_order, "Quintile metrics", style=pct, cols=c(28:53), rows=2:(nrow(quintile_metrics)+1), gridExpand=TRUE)
# addStyle(rand_order, "Median metrics", style=pct, cols=c(28:53), rows=2:(nrow(median_metrics)+1), gridExpand=TRUE)
#
# #accounting format
# addStyle(rand_order, "Quintile metrics", style=acct, cols=c(54:79,106:157), rows=2:(nrow(quintile_metrics)+1), gridExpand=TRUE)
# addStyle(rand_order, "Median metrics", style=acct, cols=c(54:79,106:157), rows=2:(nrow(median_metrics)+1), gridExpand=TRUE)
saveWorkbook(rand_order, paste0("/data/metrics_", format(Sys.time(), "%d-%b-%Y %H.%M"), ".xlsx"))

#load both annual and monthly CPI
annual_cpi <- cpi_u_rs_annual
cpi_2022 <- annual_cpi$cpi_u_rs[annual_cpi$year=='2022']
#monthly CPI
monthly_cpi <- cpi_u_rs_monthly_nsa
cpi_dec2022 <- monthly_cpi$cpi_u_rs[monthly_cpi$year == '2022' & monthly_cpi$month=='12'] # Adjust all to December 2022 $
# Load and clean 2022 poverty thresholds. Source:
# https://www.census.gov/data/tables/time-series/demo/income-poverty/historical-poverty-thresholds.html
raw_threshold <- readxl::read_excel(here('input/thresh22.xlsx'), range = "A6:J22") %>%
janitor::clean_names() %>%
rename(famsize = x1) %>%
#Clean names
mutate(famsize = str_replace_all(famsize,"[[:punct:]]",""),
famsize = str_replace(famsize, "Under 65 years", "One person <65"),
famsize = str_replace(famsize, "Householder under 65 years", "Two people <65")) %>%
filter(!is.na(famsize), !is.na(none), !(famsize %in% c('65 years and over', 'Householder 65 years and over')))
extended_threshold <- read_csv(here('input/povthresh22.csv'), col_names=TRUE) %>%
filter(year==2022, month==12) %>%
filter(famsize>9) %>%
select(famsize, child_under18, threshold2022=pov_thresh_2022)
#create a historic threshold from 1994 to present by adjusting 2022 thresholds
#Perhaps restructure this part of the code.
#Merge this on to CPS data by family and children.
#Merge threshold data to fams and CPI to cps by month
clean_thresh <- raw_threshold %>%
pivot_longer(2:ncol(raw_threshold), values_to="threshold2022", names_to = 'children') %>%
filter(!is.na(threshold2022)) %>%
mutate(famsize = factor(famsize, levels = c('One person <65', 'Two people <65', 'Three people', 'Four people', 'Five people', 'Six people',
'Seven people', 'Eight people', 'Nine people or more')),
child_under18 = case_when(children == 'none' ~ 0,
children == 'one' ~ 1,
children == 'two' ~ 2,
children == 'three' ~ 3,
children == 'four' ~ 4,
children == 'five' ~ 5,
children == 'six' ~ 6,
children == 'seven' ~ 7,
children == 'eight_or_more' ~ 8)) %>%
rename(old_famsize = famsize) %>%
mutate(famsize = as.numeric(old_famsize)) %>%
select(famsize, child_under18, threshold2022)%>%
#Merge an extended threshold categories to map onto large families (10+)
bind_rows(extended_threshold)
#load CPS Basic data, but then restrict to minsamp 4 & 8 (ORG months only)
cps <- load_basic(1994:2022, orgwgt, basicwgt, finalwgt, year, month, minsamp, selfemp,
selfinc, personid, hhid, hhtype, famtype, famid, famrel, ownchild,
agechild, paidhre, emp, wage, wageotc, weekpay, faminc, hourslwt, hourslw1, hoursu1i,
emphrs, unemp, lfstat, age, wbhao, wbho_only, faminc) %>%
#keep only those interviewed in the ORG
filter(minsamp %in% c(4,8)) %>%
#Create indicators for self-employed/incorporated workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
selfany = ifelse(selfinc0==1 | selfemp0==1, yes=1, no=0),
emp0 = ifelse(emp==1 & !is.na(emp), yes=1, no=0)) %>%
#create indicator of reason not at work/hours last week
mutate(hourslw_i = ifelse(hourslwt<=0 | is.na(hourslwt), yes=0, no=1)) %>%
#Merge CPI data and inflation adjust wage data
left_join(monthly_cpi, by=c('year', 'month')) %>%
#Inflation adjust wage data, and create wage variable for hourly and salaried workers.
mutate(realweekpay = weekpay*(cpi_dec2022/cpi_u_rs),
realwageotc = wageotc*(cpi_dec2022/cpi_u_rs),
#create real weekly pay variable by multiplying usual hours * wageotc
realwage.c = ifelse(hoursu1i>0, yes=hoursu1i * realwageotc, no = NA),
#If worker is paid hourly, assign them the constructed variable realwage.c
#If not hourly then weekpay == inflation adjusted CPS weekly pay variable.
realweekpay.c = ifelse(paidhre==1, yes=realwage.c, no=realweekpay),
#Assign workers with zero hours last week 0 wages
realweekpay.c = replace(realweekpay.c, hourslw_i==0, NA),
#Create annual pay variables
realyearpay.c = ifelse(realweekpay.c>0, realweekpay.c * 52, no=NA),
under18 = ifelse(age<18, yes=1, no=0)) %>%
set_value_labels(under18 = c('under 18'= 1, 'over 18'=0),
month = c('Jan' = 1, 'Feb' = 2, 'Mar' = 3, 'Apr' = 4,
'May' = 5, 'Jun' = 6, 'Jul' = 7, 'Aug' = 8,
'Sept' = 9, 'Oct' = 10, 'Nov' = 11, 'Dec' = 12)) %>%
group_by(year, month, hhid, famid) %>%
#create group id for each family in sample
mutate(group_id = cur_group_id()) %>%
ungroup() %>%
mutate(faminc = to_factor(faminc))
#Create weights for children under 16.
wgt_ratios <- cps %>%
select(group_id, famrel, orgwgt, finalwgt) %>%
filter(famrel==1) %>%
#Calculate ratio of ORG:final weight according to Saenz Sherman 2020.
mutate(orgfinal_ratio = ifelse(famrel==1, yes=orgwgt/finalwgt, no=NA)) %>%
select(group_id, orgfinal_ratio)
#This groups people into families
cps_families <- cps %>%
#merge org-to-final weight ratios to cps dataset by group_id
left_join(wgt_ratios, by='group_id') %>%
relocate(famrel, age, finalwgt, orgwgt, .after=orgfinal_ratio) %>%
#Create a new weight for those under 16yo according to Saenz, Sherman 2020.
mutate(adj_wgt = ifelse(age<16, yes=orgfinal_ratio*finalwgt, no=orgwgt)) %>%
#Count self employed in each family
mutate(selfemp_pop = sum(selfany==1),
emp_pop = sum(emp0==1, na.rm=TRUE), .by=group_id) %>%
#remove families where all workers are self-employed
filter(!(emp_pop<=selfemp_pop & emp_pop!=0)) %>%
#Drop all families w/one member 65+
mutate(has_elderly = any(age>=65), .by=group_id) %>%
filter(has_elderly==FALSE) %>%
#Count size of families and number of children present
mutate(famsize = n(),
child_under18 = sum(famrel==3 & age<18), .by=group_id) %>%
#Join 2022 poverty threshold
left_join(clean_thresh, by=c('famsize', 'child_under18')) %>%
#poverty thresholds count children in family under 18
mutate(famsize = n(),
child_under18 = sum(famrel==3 & age<18),
#count family's real annual pay
rtotweekpay = sum(realweekpay.c, na.rm=TRUE),
rtotyearpay = sum(realweekpay.c*52, na.rm=TRUE),
.by=group_id) %>%
#Merge poverty thresholds from census
mutate(weekly_threshold2022 = (threshold2022/52)) %>%
# Here I calculate how many families are in poverty by comparing their weekly
# earnings with the 2022 "weekly-ized" poverty thresholds :p
#Creates indicator for individuals in pov, and measure ranging from 0-4029% of poverty level
mutate(inpoverty = ifelse((rtotweekpay<weekly_threshold2022), yes=1, no=0),
povlevel = round((rtotyearpay/threshold2022)*100)) %>%
#count individuals w/no income
mutate(noincome = ifelse(rtotweekpay==0, yes=1, no=0)) %>%
set_value_labels(noincome = c('No income'= 1, 'With income'= 0)) %>%
#remove 1152 observations in sample that have no ORG weight
filter(!is.na(adj_wgt)) %>%
#write workbook so I can play with data later!
relocate(group_id, faminc, .after = rtotyearpay) %>%
write_csv(here('input/poverty_rate_data.csv'))
#
# natl_poverty_monthly <- cps_families %>%
#   group_by(year, month) %>%
#   summarize(n = n(),
#             in_poverty = sum(inpoverty * (adj_wgt/12), na.rm=TRUE),
#             poverty = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE),
#             urate16_64 = weighted.mean(unemp, w=adj_wgt, na.rm=TRUE)) %>%
#   mutate(group='Poverty, all',
#          poverty_earnings='All',
#          date= as.Date(paste(year, month, 1, sep = "-"), "%Y-%m-%d"))
#
# hist_poverty <- ggplot(aes(x=date, y=poverty), data=natl_poverty_monthly)+
#   theme_light()+
#   theme(plot.title = element_text(size=16, face="bold.italic"))+
#   labs(title = 'Historical market based poverty rate', y="Poverty rate", x="Date")+
#   geom_line(size=1)
#
# hist_urate <-  ggplot(aes(x=date, y=urate), data=natl_poverty_monthly)+
#   theme_light()+
#   theme(plot.title = element_text(size=16, face="bold.italic"))+
#   labs(title = 'Historical unemployment 16-64', y="Unemp. rate", x="Date")+
#   geom_line(size=1)
#
#
# annual_natl_poverty <- cps_families %>%
#   group_by(year) %>%
#   summarize(n = n(),
#             in_poverty = sum(inpoverty * (adj_wgt/12), na.rm=TRUE),
#             poverty = weighted.mean(inpoverty, w=adj_wgt/12, na.rm=TRUE),
#             urate = weighted.mean(unemp, w=adj_wgt/12, na.rm=TRUE)) %>%
#   mutate(group='Poverty, all',
#          poverty_earnings='All')
#
# annual_hist_poverty <- ggplot(aes(x=year, y=poverty), data=annual_natl_poverty)+
#   theme_light()+
#   theme(plot.title = element_text(size=16, face="bold.italic"))+
#   labs(title = 'Historical market based poverty rate', y="Poverty rate", x="Date")+
#   geom_line(size=1)
#
# hist_poverty + hist_urate
#
# #save photo to output
# ggsave(here(paste0('output/stateplots/',plotstates[i],'.png')), plot = last_plot(), dpi=300, width = 9, height = 5)
# Wrangle poverty data
unemp_data <- load_basic(1994:2022, orgwgt, basicwgt, year, month, minsamp, selfemp, selfinc, emp, unemp, lfstat, age, wbhao) %>%
#keep only those interviewed in the ORG
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
selfany = ifelse(selfinc0==1 | selfemp0==1, yes=1, no=0),
emp0 = ifelse(emp==1 & !is.na(emp), yes=1, no=0))
#Overall unemployment
overall_urate <- unemp_data %>%
filter(age>=16, lfstat %in% c(1,2), selfemp0==0, selfinc0==0) %>%
group_by(year) %>%
summarize(urate_16plus = weighted.mean(unemp, w=basicwgt/12, na.rm=TRUE))
#Load poverty data csv ()
poverty_data <- fread(here('input/poverty_rate_data.csv'), na.strings = "NA")
poverty_0to64 <- cps_families %>%
group_by(year) %>%
summarise(poverty_0to64 = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE),
poverty_levels_0to64 = sum(inpoverty * adj_wgt/12, na.rm = TRUE)) %>%
left_join(overall_urate)
urate_wbhao <- unemp_data %>%
filter(age>=16, lfstat %in% c(1,2), selfemp0==0, selfinc0==0) %>%
group_by(year, wbhao) %>%
summarize(urate_16plus_wbhao = weighted.mean(unemp, w=basicwgt/12, na.rm=TRUE))
poverty_wbhao_16to64 <- cps_families %>%
group_by(year, wbhao) %>%
mutate(wbhao = to_factor(wbhao)) %>%
summarise(pov_16to64_wbhao = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE),
poverty_levels_0to64 = sum(inpoverty * adj_wgt/12, na.rm = TRUE)) %>%
pivot_wider(id_cols = year, names_from = wbhao, values_from = c(pov_16to64_wbhao, poverty_levels_0to64)) %>%
left_join(overall_urate)
pov_data <- createWorkbook()
addWorksheet(pov_data, sheetName = "Overall")
addWorksheet(pov_data, sheetName = "Wbhao")
pct = createStyle(numFmt = '0.0%')
acct = createStyle(numFmt = '#.0' )
hs1 <- createStyle(fgFill = "#4F81BD", halign = "CENTER", textDecoration = "Bold",
border = "Bottom", fontColour = "white")
writeData(pov_data, headerStyle = hs1, poverty_16to64, sheet = "Overall",
startCol = 1, startRow = 1, colNames = TRUE)
writeData(pov_data, poverty_wbhao_16to64, headerStyle = hs1, sheet = "Wbhao",
startCol = 1, startRow = 1, colNames = TRUE)
saveWorkbook(pov_data, here("output/poverty_workbook_2.0.xlsx"), overwrite = TRUE)
View(poverty_0to64)
povrates_0to64 <- cps_families %>%
summarise(poverty_0to64 = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE), .by=year) %>%
left_join(overall_urate)
povlevels_0to64 <- cps_families %>%
summarize(povlevel_0to64 = sum(inpoverty * adj_wgt/12, na.rm = TRUE), .by=year)
povlevels_0to64 <- cps_families %>%
summarize(povlevel_0to64 = sum(inpoverty * adj_wgt/12, na.rm = TRUE), .by=year) %>%
left_join(overall_urate)
View(povlevels_0to64)
#annual poverty data
povrates_0to64 <- cps_families %>%
summarise(poverty_0to64 = weighted.mean(inpoverty, w=adj_wgt/12, na.rm=TRUE), .by=year) %>%
left_join(overall_urate)
povlevels_0to64 <- cps_families %>%
summarize(povlevel_0to64 = sum(inpoverty * adj_wgt/12, na.rm = TRUE), .by=year) %>%
left_join(overall_urate)
rm(poverty_0to64)
View(povrates_0to64)
#annual poverty data
povrates_0to64 <- cps_families %>%
summarise(poverty_0to64 = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE), .by=year) %>%
left_join(overall_urate)
#annual poverty data
povrates_0to64 <- cps_families %>%
summarise(poverty_0to64 = weighted.mean(inpoverty, w=adj_wgt/12, na.rm=TRUE), .by=year) %>%
left_join(overall_urate)
#annual poverty data
povrates_0to64 <- cps_families %>%
summarise(poverty_0to64 = weighted.mean(inpoverty, w=adj_wgt/12, na.rm=TRUE), .by=year) %>%
left_join(overall_urate)
povlevels_0to64 <- cps_families %>%
summarize(povlevel_0to64 = sum(inpoverty * adj_wgt/12, na.rm = TRUE), .by=year) %>%
left_join(overall_urate)
urate_wbhao <- unemp_data %>%
filter(age>=16, lfstat %in% c(1,2), selfemp0==0, selfinc0==0) %>%
summarize(urate_16plus_wbhao = weighted.mean(unemp, w=basicwgt/12, na.rm=TRUE), .by = c(year,wbhao))
povrates_0to64_wbhao <- cps_families %>%
mutate(wbhao = to_factor(wbhao)) %>%
summarise(povrate_0to64 = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE), .by=c(year, wbhao)) %>%
pivot_wider(id_cols = year, names_from = wbhao, values_from = c(povrate_0to64)) %>%
left_join(overall_urate)
povlevels_0to64_wbhao <- cps_families %>%
mutate(wbhao = to_factor(wbhao)) %>%
summarise(povlevel_0to64 = sum(inpoverty * adj_wgt/12, na.rm=TRUE), .by=c(year, wbhao)) %>%
pivot_wider(id_cols = year, names_from = wbhao, values_from = c(povlevel_0to64)) %>%
left_join(overall_urate)
View(povlevels_0to64_wbhao)
# This script attempts to benchmark our market based poverty measure to Tables 1 and 2 from
# https://www.cbpp.org/research/poverty-and-inequality/research-note-number-of-people-in-families-with-below-poverty#_ftnref2
popcount <- cps %>%
group_by(month) %>%
filter(age>=16 & age<65) %>%
summarize(wgt_n = sum(orgwgt, na.rm=TRUE),
employed = sum(emp * orgwgt, na.rm=TRUE),
n = n())
#filtered bc I remove everyone who doesn't have a finalwgt and thus adj_wgt
popcount_filtered <- cps_families %>%
group_by(month) %>%
filter(age>=16 & age<65) %>%
summarize(wgt_n = sum(orgwgt, na.rm=TRUE),
employed = sum(emp * orgwgt, na.rm=TRUE),
n = n())
povcount_all <- cps_families %>%
filter(year==2020) %>%
group_by(month) %>%
summarize(wgt_n = sum(inpoverty * adj_wgt, na.rm=TRUE),
share = weighted.mean(inpoverty, w=adj_wgt/12, na.rm=TRUE),
n = n()) %>%
mutate(group='Poverty, all',
poverty_earnings='All',
year=2020)
monthlypov_all <- cps_families %>%
filter(year==2020) %>%
group_by(month) %>%
summarize(inpov = sum(inpoverty * adj_wgt, na.rm=TRUE),
share = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE),
n = n(),
wgt_n = sum(inpoverty*adj_wgt, na.rm=TRUE)) %>%
mutate(group='Poverty, all',
poverty_earnings='All')
povcount_under18 <- cps_families %>%
filter(year==2020) %>%
filter(age<18) %>%
group_by(month) %>%
summarize(wgt_n = sum(inpoverty * adj_wgt, na.rm=TRUE),
share = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE),
n = n()) %>%
mutate(group='Poverty, all',
poverty_earnings='All')
povcount_wbho_only <- cps_families %>%
filter(year==2020) %>%
group_by(year, month, wbho_only) %>%
summarize(wgt_n = sum(inpoverty * adj_wgt, na.rm=TRUE),
share = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE),
n = n()) %>%
mutate(wbho_only = to_factor(wbho_only)) %>%
mutate(group='Poverty, wbho_only',
poverty_earnings=wbho_only)
povcount_wbho_only <- cps_families %>%
filter(year==2020) %>%
group_by(year, month, wbho_only) %>%
summarize(wgt_n = sum(inpoverty * adj_wgt, na.rm=TRUE),
share = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE),
n = n()) %>%
mutate(wbho_only = to_factor(wbho_only)) %>%
mutate(group='Poverty, wbho_only',
poverty_earnings=wbho_only)
povcount_age <- cps_families %>%
filter(year==2020) %>%
group_by(year, month, under18) %>%
summarize(wgt_n= sum(inpoverty * adj_wgt, na.rm=TRUE),
share = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE),
n=n()) %>%
mutate(under18 = as.character(to_factor(under18))) %>%
filter(under18=='under 18') %>%
mutate(group='Poverty, age') %>%
rename(poverty_earnings = under18)
noincome_all <- cps_families %>%
filter(year==2020) %>%
group_by(year, month) %>%
summarize(wgt_n = sum(noincome * adj_wgt, na.rm=TRUE),
share = weighted.mean(noincome, w=adj_wgt, na.rm=TRUE),
n = n()) %>%
mutate(group='No income, all',
zero_earnings = 'All')
noincome_wbho_only <- cps_families %>%
filter(year==2020) %>%
mutate(wbho_only=as_factor(wbho_only)) %>%
group_by(year, month, wbho_only) %>%
summarize(wgt_n = sum(noincome * adj_wgt, na.rm=TRUE),
share = weighted.mean(noincome, w=adj_wgt, na.rm=TRUE),
n = n()) %>%
mutate(group='No income, wbho_only') %>%
rename(zero_earnings = wbho_only)
noincome_age <- cps_families %>%
filter(year==2020) %>%
group_by(year, month, under18) %>%
summarize(wgt_n = sum(noincome * adj_wgt, na.rm=TRUE),
share = weighted.mean(noincome, w=adj_wgt, na.rm=TRUE),
n=n()) %>%
mutate(under18 = as.character(to_factor(under18))) %>%
filter(under18=='under 18') %>%
mutate(group='No income, age') %>%
rename(zero_earnings = under18)
#bind poverty tables
fams_in_poverty_count <- bind_rows(povcount_all, povcount_age, povcount_wbho_only) %>%
filter(month %in% c(2,4,6)) %>%
mutate(month = to_factor(month)) %>%
pivot_wider(id_cols = poverty_earnings, names_from = c(month,year), values_from = wgt_n) %>%
mutate(feb_to_jun_pct = (Jun_2020/Feb_2020)-1)
fams_in_poverty_share <- bind_rows(povcount_all,povcount_age, povcount_wbho_only) %>%
filter(month %in% c(2,4,6)) %>%
mutate(month = to_factor(month)) %>%
pivot_wider(id_cols = poverty_earnings, names_from = c(month, year), values_from = share) %>%
mutate(feb_to_jun_ppt = (Jun_2020-Feb_2020))
#bind zero income tables
fams_no_income_count <- bind_rows(noincome_all, noincome_age, noincome_wbho_only) %>%
filter(month %in% c(2,4,6)) %>%
mutate(month = to_factor(month)) %>%
pivot_wider(id_cols = zero_earnings, names_from = c(month,year), values_from = wgt_n) %>%
mutate(feb_to_jun_pct = (Jun_2020/Feb_2020)-1)
fams_no_income_share <- bind_rows(noincome_all, noincome_age, noincome_wbho_only) %>%
filter(month %in% c(2,4,6)) %>%
mutate(month = to_factor(month)) %>%
pivot_wider(id_cols = zero_earnings, names_from = c(month,year), values_from = share) %>%
mutate(feb_to_jun_ppt = (Jun_2020-Feb_2020))
table1 <- bind_rows(fams_in_poverty_count, fams_no_income_count) %>%
relocate(zero_earnings, .after=poverty_earnings) %>%
mutate(Feb_2020 = Feb_2020/1000000,
Apr_2020 = Apr_2020/1000000,
Jun_2020 = Jun_2020/1000000)
table2 <- bind_rows(fams_in_poverty_share, fams_no_income_share) %>%
relocate(zero_earnings, .after=poverty_earnings)
#benchmark of employed persons
adults <- cps_families %>%
filter(year==2020) %>%
summarize(adults_16plus = sum(orgwgt/12, na.rm=TRUE),
adults_pwages = sum(orgwgt[weekpay>0]/12, na.rm=TRUE),
n = n())
payeligible <- cps_families %>%
filter(year==2020) %>%
group_by(month) %>%
summarize(adults_16plus = sum(orgwgt, na.rm=TRUE),
adults_elig = sum(orgwgt[emp==1], na.rm=TRUE),
adult_pos_earn = sum(orgwgt[weekpay>0], na.rm=TRUE),
n = n())
#count of population by age
agecount <- cps_families %>%
filter(year==2020) %>%
group_by(age) %>%
summarize(under16 = sum(adj_wgt/12, na.rm=TRUE),
adults_pwages = sum(adj_wgt[weekpay>0]/12, na.rm=TRUE),
n = n())
## median weekly pay benchmark to https://www.bls.gov/news.release/pdf/wkyeng.pdf
benchmarkpay <- cps_families %>%
filter(age>=16, selfemp==0, selfinc==0, emp==1) %>%
mutate(date = as.Date(paste(year, month, 1, sep = "-"), "%Y-%m-%d")) %>%
#create quarterly date periods
mutate(qtr=as.yearqtr(date)) %>%
filter(hoursu1i>=35 & !is.na(hoursu1i)) %>%
group_by(qtr) %>%
summarize(med_wages = median(realwage, w=orgwgt, na.rm=TRUE),
med_weekpay.c = median(realweekpay.c, w=orgwgt, na.rm=TRUE),
med_weekpay = median(realweekpay, w=orgwgt, na.rm=TRUE),
wgt_n=sum(orgwgt/3, na.rm=TRUE)/1000)
# will break if age is not restricted to 16+
weekpay <- cps_families %>%
filter(age>=16 & age<65, selfinc0==0, selfemp0==0) %>%
group_by(month) %>%
summarize(avg_wages = weighted.mean(realwage, w=orgwgt, na.rm=TRUE),
avg_weekpay.c = weighted.mean(realweekpay.c, w=orgwgt, na.rm=TRUE),
avg_weekpay = weighted.mean(realweekpay, w=orgwgt, na.rm=TRUE),
n=n())
# Workbook export
pov <- createWorkbook()
addWorksheet(pov, sheetName = "Table 1")
addWorksheet(pov, sheetName = "Table 2")
pct = createStyle(numFmt = '0.0%')
acct = createStyle(numFmt = '#.0' )
hs1 <- createStyle(fgFill = "#4F81BD", halign = "CENTER", textDecoration = "Bold",
border = "Bottom", fontColour = "white")
writeData(pov, headerStyle = hs1, table1, sheet = "Table 1",
startCol = 1, startRow = 1, colNames = TRUE)
writeData(pov, table2, headerStyle = hs1, sheet = "Table 2",
startCol = 1, startRow = 1, colNames = TRUE)
#add percent format
addStyle(pov, "Table 1", style=pct, cols=6, rows=2:(nrow(table1)+1), gridExpand=TRUE)
addStyle(pov, "Table 2", style=pct, cols=c(3:6), rows=2:(nrow(table2)+1), gridExpand=TRUE)
#add accounting format
addStyle(pov, "Table 1", style=acct, cols=c(3:5), rows=2:(nrow(table1)+1), gridExpand=TRUE)
saveWorkbook(pov, here("output/cbpp_benchmark.xlsx"), overwrite = TRUE)
View(povrates_0to64)
View(table1)
View(table2)
names(povlevels_0to64)
names(povlevels_0to64_wbhao)
pov_data <- createWorkbook()
addWorksheet(pov_data, sheetName = "Pov. rates overall")
addWorksheet(pov_data, sheetName = "Pov. rates wbhao")
addWorksheet(pov_data, sheetName = "Pov. levels overall")
addWorksheet(pov_data, sheetName = "Pov. levels wbhao")
pct = createStyle(numFmt = '0.0%')
acct = createStyle(numFmt = '#.0' )
hs1 <- createStyle(fgFill = "#4F81BD", halign = "CENTER", textDecoration = "Bold",
border = "Bottom", fontColour = "white")
writeData(pov_data, headerStyle = hs1, povrates_0to64, sheet = "Pov. rates overall",
startCol = 1, startRow = 1, colNames = TRUE)
writeData(pov_data, povrates_0to64_wbhao, headerStyle = hs1, sheet = "Pov. rates wbhao",
startCol = 1, startRow = 1, colNames = TRUE)
writeData(pov_data, headerStyle = hs1, povlevels_0to64, sheet = "Pov. levels overall",
startCol = 1, startRow = 1, colNames = TRUE)
writeData(pov_data, povlevels_0to64_wbhao, headerStyle = hs1, sheet = "Pov. levels wbhao",
startCol = 1, startRow = 1, colNames = TRUE)
#add percent format
addStyle(pov_data, "Pov. rates overall", style=pct, cols=c(2:3), rows=2:(nrow(povrates_0to64)+1), gridExpand=TRUE)
addStyle(pov_data, "Pov. rates wbhao", style=pct, cols=c(2:7), rows=2:(nrow(povrates_0to64_wbhao)+1), gridExpand=TRUE)
addStyle(pov_data, "Pov. levels overall", style=pct, cols=c(3), rows=2:(nrow(povlevels_0to64)+1), gridExpand=TRUE)
addStyle(pov_data, "Pov. levels wbhao", style=pct, cols=c(7), rows=2:(nrow(povlevels_0to64_wbhao)+1), gridExpand=TRUE)
#add accounting format
addStyle(pov_data, "Pov. levels overall", style=acct, cols=c(2), rows=2:(nrow(povlevels_0to64)+1), gridExpand=TRUE)
addStyle(pov_data, "Pov. levels wbhao", style=acct, cols=c(2:6), rows=2:(nrow(povlevels_0to64_wbhao)+1), gridExpand=TRUE)
saveWorkbook(pov_data, here("output/06-23-2023 pov. levels and rates.xlsx"), overwrite = TRUE)
pov_data <- createWorkbook()
addWorksheet(pov_data, sheetName = "Pov. rates overall")
addWorksheet(pov_data, sheetName = "Pov. rates wbhao")
addWorksheet(pov_data, sheetName = "Pov. levels overall")
addWorksheet(pov_data, sheetName = "Pov. levels wbhao")
pct = createStyle(numFmt = '0.0%')
acct = createStyle(numFmt = '#,0' )
hs1 <- createStyle(fgFill = "#4F81BD", halign = "CENTER", textDecoration = "Bold",
border = "Bottom", fontColour = "white")
writeData(pov_data, headerStyle = hs1, povrates_0to64, sheet = "Pov. rates overall",
startCol = 1, startRow = 1, colNames = TRUE)
writeData(pov_data, povrates_0to64_wbhao, headerStyle = hs1, sheet = "Pov. rates wbhao",
startCol = 1, startRow = 1, colNames = TRUE)
writeData(pov_data, headerStyle = hs1, povlevels_0to64, sheet = "Pov. levels overall",
startCol = 1, startRow = 1, colNames = TRUE)
writeData(pov_data, povlevels_0to64_wbhao, headerStyle = hs1, sheet = "Pov. levels wbhao",
startCol = 1, startRow = 1, colNames = TRUE)
#add percent format
addStyle(pov_data, "Pov. rates overall", style=pct, cols=c(2:3), rows=2:(nrow(povrates_0to64)+1), gridExpand=TRUE)
addStyle(pov_data, "Pov. rates wbhao", style=pct, cols=c(2:7), rows=2:(nrow(povrates_0to64_wbhao)+1), gridExpand=TRUE)
addStyle(pov_data, "Pov. levels overall", style=pct, cols=c(3), rows=2:(nrow(povlevels_0to64)+1), gridExpand=TRUE)
addStyle(pov_data, "Pov. levels wbhao", style=pct, cols=c(7), rows=2:(nrow(povlevels_0to64_wbhao)+1), gridExpand=TRUE)
#add accounting format
addStyle(pov_data, "Pov. levels overall", style=acct, cols=c(2), rows=2:(nrow(povlevels_0to64)+1), gridExpand=TRUE)
addStyle(pov_data, "Pov. levels wbhao", style=acct, cols=c(2:6), rows=2:(nrow(povlevels_0to64_wbhao)+1), gridExpand=TRUE)
saveWorkbook(pov_data, here("output/06-23-2023 pov. levels and rates.xlsx"), overwrite = TRUE)
View(cps_families)
library(realtalk)
#Load CPI data
annual_cpi <- cpi_u_rs_annual
cpi_2019 <- annual_cpi$cpi_u_rs[annual_cpi$year=='2019']
#Load CPI data
cpi <- cpi_u_rs_annual
cpi_2019 <- annual_cpi$cpi_u_rs[annual_cpi$year=='2019']

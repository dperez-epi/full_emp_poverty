#Load 2020 poverty thresholds. Source:
#https://www.census.gov/data/tables/time-series/demo/income-poverty/historical-poverty-thresholds.html
pov_thresh <- read_csv(here('input/povthresh22.csv'), col_names=TRUE) %>%
filter(over65==0) %>%
select(year, month, famsize, child_under18, pov_thresh_2022)
#create a historic threshold from 1994 to present by adjusting 2020 thresholds
#with CPI-U
historic_thresh <- cpi %>%
filter(year %in% c(1994:2022)) %>%
left_join(pov_thresh, by='month') %>%
rename(year = year.x) %>%
select(-year.y)
#load CPS Basic data, but then restrict to minsamp 4 & 8 (ORG months only)
cps <- load_basic(1994:2022, orgwgt, basicwgt, finalwgt, year, month, minsamp, selfemp,
selfinc, personid, hhid, hhtype, famtype, famid, famrel, ownchild,
agechild, paidhre, wage, wageotc, weekpay, faminc, hourslwt, hourslw1, hoursu1i,
emphrs, emp, unemp, cow1, lfstat, age, wbhao, wbho_only, faminc) %>%
#keep only those interviewed in the ORG
filter(minsamp %in% c(4,8)) %>%
#Create variables to easily exclude self employed/incorporated workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
selfany = ifelse(selfinc0==1 | selfemp0==1, yes=1, no=0),
emp0 = ifelse(emp==1 & !is.na(emp), yes=1, no=0)) %>%
#create indicator of reason not at work/hours last week
mutate(hourslw_i = ifelse(hourslwt<=0 | is.na(hourslwt), yes=0, no=1)) %>%
#Merge CPI data and inflation adjust wage data
left_join(cpi, by=c('year', 'month')) %>%
#Inflation adjust wage data, and create wage variable for hourly and salaried workers.
mutate(realweekpay = weekpay*(cpi_base/cpiurs),
realwageotc = wageotc*(cpi_base/cpiurs),
realwage.c = ifelse(hoursu1i>0, yes=hoursu1i * realwageotc, no = NA),
#If worker is paid hourly, calculate weekly pay as realwageotc*hoursu1i.
#If not hourly then weekpay== inflation adjusted CPS weekly pay variable.
realweekpay.c = ifelse(paidhre==1, yes=realwage.c, no=realweekpay),
#Assign workers with zero hours last week 0 wages
realweekpay.c = replace(realweekpay.c, hourslw_i==0, NA),
#Create annual pay variables
realyearpay.c = ifelse(realweekpay.c>0, realweekpay.c * 52, no=NA),
#create indicators for positive hours, weekly pay, and wages
under18 = ifelse(age<18, yes=1, no=0)) %>%
set_value_labels(under18 = c('under 18'= 1, 'over 18'=0),
month = c('Jan' = 1, 'Feb' = 2, 'Mar' = 3, 'Apr' = 4,
'May' = 5, 'Jun' = 6, 'Jul' = 7, 'Aug' = 8,
'Sept' = 9, 'Oct' = 10, 'Nov' = 11, 'Dec' = 12),
emp0 = c('Employed' = 1, 'NILF/unemployed/NIU'=0)) %>%
group_by(year, month, hhid, famid) %>%
#create group id for each family in sample
mutate(group_id = cur_group_id()) %>%
ungroup()
View(cps)
#load CPS Basic data, but then restrict to minsamp 4 & 8 (ORG months only)
cps <- load_basic(1994:2022, orgwgt, basicwgt, finalwgt, year, month, minsamp, selfemp,
selfinc, personid, hhid, hhtype, famtype, famid, famrel, ownchild,
agechild, paidhre, wage, wageotc, weekpay, faminc, hourslwt, hourslw1, hoursu1i,
emphrs, emp, unemp, cow1, lfstat, age, wbhao, wbho_only, faminc) %>%
#keep only those interviewed in the ORG
filter(minsamp %in% c(4,8)) %>%
#Create variables to easily exclude self employed/incorporated workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
selfany = ifelse(selfinc0==1 | selfemp0==1, yes=1, no=0),
emp0 = ifelse(emp==1 & !is.na(emp), yes=1, no=0)) %>%
#create indicator of reason not at work/hours last week
mutate(hourslw_i = ifelse(hourslwt<=0 | is.na(hourslwt), yes=0, no=1)) %>%
#Merge CPI data and inflation adjust wage data
left_join(cpi, by=c('year', 'month')) %>%
#Inflation adjust wage data, and create wage variable for hourly and salaried workers.
mutate(realweekpay = weekpay*(cpi_base/cpiurs),
realwageotc = wageotc*(cpi_base/cpiurs),
realwage.c = ifelse(hoursu1i>0, yes=hoursu1i * realwageotc, no = NA),
#If worker is paid hourly, calculate weekly pay as realwageotc*hoursu1i.
#If not hourly then weekpay== inflation adjusted CPS weekly pay variable.
realweekpay.c = ifelse(paidhre==1, yes=realwage.c, no=realweekpay),
#Assign workers with zero hours last week 0 wages
realweekpay.c = replace(realweekpay.c, hourslw_i==0, NA),
#Create annual pay variables
realyearpay.c = ifelse(realweekpay.c>0, realweekpay.c * 52, no=NA),
#create indicators for positive hours, weekly pay, and wages
under18 = ifelse(age<18, yes=1, no=0)) %>%
set_value_labels(under18 = c('under 18'= 1, 'over 18'=0),
month = c('Jan' = 1, 'Feb' = 2, 'Mar' = 3, 'Apr' = 4,
'May' = 5, 'Jun' = 6, 'Jul' = 7, 'Aug' = 8,
'Sept' = 9, 'Oct' = 10, 'Nov' = 11, 'Dec' = 12),
emp0 = c('Employed' = 1, 'NILF/unemployed/NIU'=0)) %>%
group_by(year, month, hhid, famid) %>%
#create group id for each family in sample
mutate(group_id = cur_group_id()) %>%
ungroup() %>%
mutate(faminc = to_factor(faminc))
#Below I load both annual and monthly CPI, as I want to adjust the 2020 annual
#poverty thresholds from $2020 CPI-U into monthly poverty thresholds.
#annual CPI
annual_cpi <- read_csv(here('input/cpi_annual.csv'), col_names=TRUE)
cpi_2022 <- annual_cpi$cpi_u[annual_cpi$year=='2022']
#monthly CPI
cpi <- read_csv(here('input/cpi_monthly.csv'), col_names=TRUE) %>%
select(year, month, cpi_u, cpiurs)
cpi_base <- cpi$cpiurs[cpi$year == '2022' & cpi$month=='12'] # Adjust all to December 2022 $
#Load 2020 poverty thresholds. Source:
#https://www.census.gov/data/tables/time-series/demo/income-poverty/historical-poverty-thresholds.html
pov_thresh <- read_csv(here('input/povthresh22.csv'), col_names=TRUE) %>%
filter(over65==0) %>%
select(year, month, famsize, child_under18, pov_thresh_2022)
#create a historic threshold from 1994 to present by adjusting 2020 thresholds
#with CPI-U
historic_thresh <- cpi %>%
filter(year %in% c(1994:2022)) %>%
left_join(pov_thresh, by='month') %>%
rename(year = year.x) %>%
select(-year.y)
#load CPS Basic data, but then restrict to minsamp 4 & 8 (ORG months only)
cps <- load_basic(2022, orgwgt, basicwgt, finalwgt, year, month, minsamp, selfemp,
selfinc, personid, hhid, hhtype, famtype, famid, famrel, ownchild,
agechild, paidhre, wage, wageotc, weekpay, faminc, hourslwt, hourslw1, hoursu1i,
emphrs, emp, unemp, cow1, lfstat, age, wbhao, wbho_only, faminc) %>%
#keep only those interviewed in the ORG
filter(minsamp %in% c(4,8)) %>%
#Create variables to easily exclude self employed/incorporated workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
selfany = ifelse(selfinc0==1 | selfemp0==1, yes=1, no=0),
emp0 = ifelse(emp==1 & !is.na(emp), yes=1, no=0)) %>%
#create indicator of reason not at work/hours last week
mutate(hourslw_i = ifelse(hourslwt<=0 | is.na(hourslwt), yes=0, no=1)) %>%
#Merge CPI data and inflation adjust wage data
left_join(cpi, by=c('year', 'month')) %>%
#Inflation adjust wage data, and create wage variable for hourly and salaried workers.
mutate(realweekpay = weekpay*(cpi_base/cpiurs),
realwageotc = wageotc*(cpi_base/cpiurs),
realwage.c = ifelse(hoursu1i>0, yes=hoursu1i * realwageotc, no = NA),
#If worker is paid hourly, calculate weekly pay as realwageotc*hoursu1i.
#If not hourly then weekpay== inflation adjusted CPS weekly pay variable.
realweekpay.c = ifelse(paidhre==1, yes=realwage.c, no=realweekpay),
#Assign workers with zero hours last week 0 wages
realweekpay.c = replace(realweekpay.c, hourslw_i==0, NA),
#Create annual pay variables
realyearpay.c = ifelse(realweekpay.c>0, realweekpay.c * 52, no=NA),
#create indicators for positive hours, weekly pay, and wages
under18 = ifelse(age<18, yes=1, no=0)) %>%
set_value_labels(under18 = c('under 18'= 1, 'over 18'=0),
month = c('Jan' = 1, 'Feb' = 2, 'Mar' = 3, 'Apr' = 4,
'May' = 5, 'Jun' = 6, 'Jul' = 7, 'Aug' = 8,
'Sept' = 9, 'Oct' = 10, 'Nov' = 11, 'Dec' = 12),
emp0 = c('Employed' = 1, 'NILF/unemployed/NIU'=0)) %>%
group_by(year, month, hhid, famid) %>%
#create group id for each family in sample
mutate(group_id = cur_group_id()) %>%
ungroup() %>%
mutate(faminc = to_factor(faminc))
#Create weights for children under 16.
wgt_ratios <- cps %>%
select(group_id, famrel, orgwgt, finalwgt) %>%
filter(famrel==1) %>%
group_by(group_id) %>%
#Calculate ratio of ORG:final weight according to Saenz Sherman 2020.
mutate(orgfinal_ratio = ifelse(famrel==1, yes=orgwgt/finalwgt, no=NA)) %>%
select(group_id, orgfinal_ratio)
cps <- cps %>%
#merge org-to-final weight ratios to cps dataset by group_id
left_join(wgt_ratios, by='group_id') %>%
relocate(famrel, age, finalwgt, orgwgt, .after=orgfinal_ratio) %>%
#Create a new weight for those under 16yo according to Saenz, Sherman 2020.
mutate(adj_wgt = ifelse(age<16, yes=orgfinal_ratio*finalwgt, no=orgwgt))
#This groups people into families
cps_families <- cps %>%
#Only keep non elderly families
filter(age<65) %>%
#Create new data frame to measure total family income, excluding self-employed, self-incorporated families
group_by(group_id) %>%
#This section removes families where all working adults are self-employed
mutate(selfemp_pop = sum(selfany==1), #count self employed in each family
emp_pop = sum(emp0==1, na.rm=TRUE)) %>%
#remove families where all workers are self-employed
filter(!(emp_pop<=selfemp_pop & emp_pop!=0)) %>%
#poverty thresholds count children in family under 18
mutate(famsize = n(),
child_under18 = sum(famrel==3 & age<18)) %>%
#count family's real annual pay
mutate(rtotweekpay = sum(realweekpay.c, na.rm=TRUE),
rtotyearpay = sum(realweekpay.c*52, na.rm=TRUE)) %>%
ungroup() %>%
#Merge poverty thresholds from census
left_join(historic_thresh) %>%
mutate(weekly_pov_thresh_22 = (pov_thresh_2022/52)) %>%
#create unemp variable
mutate(unemp = ifelse(lfstat==2, yes=1, no=0)) %>%
set_value_labels(unemp = c('Unemployed'=1, 'Employed/NILF'=0)) %>%
mutate(inpoverty = ifelse((rtotweekpay<weekly_pov_thresh_22), yes=1, no=0), #Create an indicator for folks in poverty
povlevel = round((rtotyearpay/pov_thresh_2022)*100)) %>% #create poverty measure
mutate(noincome = ifelse(rtotweekpay==0, yes=1, no=0)) %>% #count folks w/no income
set_value_labels(noincome = c('No income'= 1, 'With income'= 0)) %>%
#remove 1152 observations in sample that have no ORG weight
filter(!is.na(adj_wgt)) %>%
#write workbook so I can play with data later!
write_csv(here('input/poverty_rate_data.csv'))
View(cps_families)
#This groups people into families
cps_families <- cps %>%
#Only keep non elderly families
filter(age<65) %>%
#Create new data frame to measure total family income, excluding self-employed, self-incorporated families
group_by(group_id) %>%
#This section removes families where all working adults are self-employed
mutate(selfemp_pop = sum(selfany==1), #count self employed in each family
emp_pop = sum(emp0==1, na.rm=TRUE)) %>%
#remove families where all workers are self-employed
filter(!(emp_pop<=selfemp_pop & emp_pop!=0)) %>%
#poverty thresholds count children in family under 18
mutate(famsize = n(),
child_under18 = sum(famrel==3 & age<18)) %>%
#count family's real annual pay
mutate(rtotweekpay = sum(realweekpay.c, na.rm=TRUE),
rtotyearpay = sum(realweekpay.c*52, na.rm=TRUE)) %>%
ungroup() %>%
#Merge poverty thresholds from census
left_join(historic_thresh) %>%
mutate(weekly_pov_thresh_22 = (pov_thresh_2022/52)) %>%
#create unemp variable
mutate(unemp = ifelse(lfstat==2, yes=1, no=0)) %>%
set_value_labels(unemp = c('Unemployed'=1, 'Employed/NILF'=0)) %>%
mutate(inpoverty = ifelse((rtotweekpay<weekly_pov_thresh_22), yes=1, no=0), #Create an indicator for folks in poverty
povlevel = round((rtotyearpay/pov_thresh_2022)*100)) %>% #create poverty measure
mutate(noincome = ifelse(rtotweekpay==0, yes=1, no=0)) %>% #count folks w/no income
set_value_labels(noincome = c('No income'= 1, 'With income'= 0)) %>%
#remove 1152 observations in sample that have no ORG weight
filter(!is.na(adj_wgt)) %>%
#write workbook so I can play with data later!
relocate(faminc, .before = group_id) %>%
write_csv(here('input/poverty_rate_data.csv'))
View(cps_families)
View(cps_families)
#Master script for poverty and full employment project
library(tidyverse)
library(data.table)
library(epiextractr)
library(epidatatools)
library(labelled)
library(here)
library(blsAPI)
library(openxlsx)
library(zoo)
library(ggplot2)
#
# This script adapts methodology from Saenz & Sherman 2020
# https://www.cbpp.org/research/poverty-and-inequality/research-note-number-of-people-in-families-with-below-poverty#_ftnref2
#
# [1] These figures reflect three refinements to a previous version of this analysis released on June 16, 2020. First, when calculating weekly earnings, we assigned zero earnings to workers who reported that they were absent from work all week without pay, even if they reported a “usual weekly earnings” amount. Second, for individuals classified as hourly workers, we calculated their weekly earnings as their hourly wage times their actual hours worked during the reference week. Third, we excluded families where all individuals who are employed (or who were employed recently) are self-employed because Census does not report weekly self-employment earnings.
#
# [2] The analysis includes people in one-person family units.
#
# [3] The latest official poverty estimates from the CPS Annual Social and Economic Supplement were based on 68,000 households interviewed in February through April 2019.
#
# The Census Bureau multiplies each CPS respondent’s results by a “sample weight” to represent the total U.S. population. For the ORG sample, Census provides special ORG sample weights for persons ages 16 and older, which we use in this analysis. For children under 16, we use their final sample weight multiplied by their family head’s ORG-to-final-sample weight ratio.
#Load CPS supplement and geographic labels
source("code/02_poverty_rates.Rmd", echo = TRUE)
source("code/03_analysis.R", echo = TRUE)
View(cps_families)
library(tidyverse)
library(data.table)
library(epiextractr)
library(epidatatools)
library(labelled)
library(here)
library(blsAPI)
library(openxlsx)
library(zoo)
library(ggplot2)
#
# This script adapts methodology from Saenz & Sherman 2020
# https://www.cbpp.org/research/poverty-and-inequality/research-note-number-of-people-in-families-with-below-poverty#_ftnref2
#
# [1] These figures reflect three refinements to a previous version of this analysis released on June 16, 2020. First, when calculating weekly earnings, we assigned zero earnings to workers who reported that they were absent from work all week without pay, even if they reported a “usual weekly earnings” amount. Second, for individuals classified as hourly workers, we calculated their weekly earnings as their hourly wage times their actual hours worked during the reference week. Third, we excluded families where all individuals who are employed (or who were employed recently) are self-employed because Census does not report weekly self-employment earnings.
#
# [2] The analysis includes people in one-person family units.
#
# [3] The latest official poverty estimates from the CPS Annual Social and Economic Supplement were based on 68,000 households interviewed in February through April 2019.
#
# The Census Bureau multiplies each CPS respondent’s results by a “sample weight” to represent the total U.S. population. For the ORG sample, Census provides special ORG sample weights for persons ages 16 and older, which we use in this analysis. For children under 16, we use their final sample weight multiplied by their family head’s ORG-to-final-sample weight ratio.
#Load CPS supplement and geographic labels
source("code/02_poverty_rates.Rmd", echo = TRUE)
View(cps_families)
View(pov_thresh)
poverty_16to64 <- cps_families %>%
group_by(year) %>%
summarise(poverty_16to64 = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE)) %>%
left_join(overall_urate)
poverty_wbhao_16to64 <- cps_families %>%
group_by(year, wbhao) %>%
summarise(pov_16to64_wbhao = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE)) %>%
left_join(overall_urate) %>%
mutate(wbhao = to_factor(wbhao)) %>%
pivot_wider(id_cols = year, names_from = wbhao, values_from = c(urate_16plus, pov_16to64_wbhao))
poverty_wbhao_16to64 <- cps_families %>%
group_by(year, wbhao) %>%
summarise(pov_16to64_wbhao = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE)) %>%
left_join(overall_urate) %>%
mutate(wbhao = to_factor(wbhao)) %>%
pivot_wider(id_cols = year, names_from = wbhao, values_from = c(urate_16plus, pov_16to64_wbhao))
natl_poverty_monthly <- cps_families %>%
group_by(year, month) %>%
summarize(n = n(),
in_poverty = sum(inpoverty * (adj_wgt/12), na.rm=TRUE),
poverty = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE),
urate = weighted.mean(unemp, w=adj_wgt, na.rm=TRUE)) %>%
mutate(group='Poverty, all',
poverty_earnings='All',
date= as.Date(paste(year, month, 1, sep = "-"), "%Y-%m-%d"))
View(natl_poverty_monthly)
natl_poverty_monthly <- cps_families %>%
group_by(year, month) %>%
summarize(n = n(),
in_poverty = sum(inpoverty * (adj_wgt/12), na.rm=TRUE),
poverty = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE),
urate16_64 = weighted.mean(unemp, w=adj_wgt, na.rm=TRUE)) %>%
mutate(group='Poverty, all',
poverty_earnings='All',
date= as.Date(paste(year, month, 1, sep = "-"), "%Y-%m-%d"))
#Below I load both annual and monthly CPI, as I want to adjust the 2020 annual
#poverty thresholds from $2020 CPI-U into monthly poverty thresholds.
#annual CPI
annual_cpi <- read_csv(here('input/cpi_annual.csv'), col_names=TRUE)
cpi_2022 <- annual_cpi$cpi_u[annual_cpi$year=='2022']
#monthly CPI
cpi <- read_csv(here('input/cpi_monthly.csv'), col_names=TRUE) %>%
select(year, month, cpi_u, cpiurs)
cpi_base <- cpi$cpiurs[cpi$year == '2022' & cpi$month=='12'] # Adjust all to December 2022 $
#Load 2020 poverty thresholds. Source:
#https://www.census.gov/data/tables/time-series/demo/income-poverty/historical-poverty-thresholds.html
pov_thresh <- read_csv(here('input/povthresh22.csv'), col_names=TRUE) %>%
filter(over65==0) %>%
select(year, month, famsize, child_under18, pov_thresh_2022)
#create a historic threshold from 1994 to present by adjusting 2020 thresholds
#with CPI-U
historic_thresh <- cpi %>%
filter(year %in% c(1994:2022)) %>%
left_join(pov_thresh, by='month') %>%
rename(year = year.x) %>%
select(-year.y)
#load CPS Basic data, but then restrict to minsamp 4 & 8 (ORG months only)
cps <- load_basic(1994:2022, orgwgt, basicwgt, finalwgt, year, month, minsamp, selfemp,
selfinc, personid, hhid, hhtype, famtype, famid, famrel, ownchild,
agechild, paidhre, wage, wageotc, weekpay, faminc, hourslwt, hourslw1, hoursu1i,
emphrs, emp, unemp, cow1, lfstat, age, wbhao, wbho_only, faminc) %>%
#keep only those interviewed in the ORG
filter(minsamp %in% c(4,8)) %>%
#Create variables to easily exclude self employed/incorporated workers
mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),
selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0),
selfany = ifelse(selfinc0==1 | selfemp0==1, yes=1, no=0),
emp0 = ifelse(emp==1 & !is.na(emp), yes=1, no=0)) %>%
#create indicator of reason not at work/hours last week
mutate(hourslw_i = ifelse(hourslwt<=0 | is.na(hourslwt), yes=0, no=1)) %>%
#Merge CPI data and inflation adjust wage data
left_join(cpi, by=c('year', 'month')) %>%
#Inflation adjust wage data, and create wage variable for hourly and salaried workers.
mutate(realweekpay = weekpay*(cpi_base/cpiurs),
realwageotc = wageotc*(cpi_base/cpiurs),
realwage.c = ifelse(hoursu1i>0, yes=hoursu1i * realwageotc, no = NA),
#If worker is paid hourly, calculate weekly pay as realwageotc*hoursu1i.
#If not hourly then weekpay== inflation adjusted CPS weekly pay variable.
realweekpay.c = ifelse(paidhre==1, yes=realwage.c, no=realweekpay),
#Assign workers with zero hours last week 0 wages
realweekpay.c = replace(realweekpay.c, hourslw_i==0, NA),
#Create annual pay variables
realyearpay.c = ifelse(realweekpay.c>0, realweekpay.c * 52, no=NA),
#create indicators for positive hours, weekly pay, and wages
under18 = ifelse(age<18, yes=1, no=0)) %>%
set_value_labels(under18 = c('under 18'= 1, 'over 18'=0),
month = c('Jan' = 1, 'Feb' = 2, 'Mar' = 3, 'Apr' = 4,
'May' = 5, 'Jun' = 6, 'Jul' = 7, 'Aug' = 8,
'Sept' = 9, 'Oct' = 10, 'Nov' = 11, 'Dec' = 12),
emp0 = c('Employed' = 1, 'NILF/unemployed/NIU'=0)) %>%
group_by(year, month, hhid, famid) %>%
#create group id for each family in sample
mutate(group_id = cur_group_id()) %>%
ungroup() %>%
mutate(faminc = to_factor(faminc))
#Create weights for children under 16.
wgt_ratios <- cps %>%
select(group_id, famrel, orgwgt, finalwgt) %>%
filter(famrel==1) %>%
group_by(group_id) %>%
#Calculate ratio of ORG:final weight according to Saenz Sherman 2020.
mutate(orgfinal_ratio = ifelse(famrel==1, yes=orgwgt/finalwgt, no=NA)) %>%
select(group_id, orgfinal_ratio)
cps <- cps %>%
#merge org-to-final weight ratios to cps dataset by group_id
left_join(wgt_ratios, by='group_id') %>%
relocate(famrel, age, finalwgt, orgwgt, .after=orgfinal_ratio) %>%
#Create a new weight for those under 16yo according to Saenz, Sherman 2020.
mutate(adj_wgt = ifelse(age<16, yes=orgfinal_ratio*finalwgt, no=orgwgt))
#This groups people into families
cps_families <- cps %>%
#Only keep non elderly families
filter(age<65) %>%
#Create new data frame to measure total family income, excluding self-employed, self-incorporated families
group_by(group_id) %>%
#This section removes families where all working adults are self-employed
mutate(selfemp_pop = sum(selfany==1), #count self employed in each family
emp_pop = sum(emp0==1, na.rm=TRUE)) %>%
#remove families where all workers are self-employed
filter(!(emp_pop<=selfemp_pop & emp_pop!=0)) %>%
#poverty thresholds count children in family under 18
mutate(famsize = n(),
child_under18 = sum(famrel==3 & age<18)) %>%
#count family's real annual pay
mutate(rtotweekpay = sum(realweekpay.c, na.rm=TRUE),
rtotyearpay = sum(realweekpay.c*52, na.rm=TRUE)) %>%
ungroup() %>%
#Merge poverty thresholds from census
left_join(historic_thresh) %>%
mutate(weekly_pov_thresh_22 = (pov_thresh_2022/52)) %>%
#create unemp variable
mutate(unemp = ifelse(lfstat==2, yes=1, no=0)) %>%
set_value_labels(unemp = c('Unemployed'=1, 'Employed/NILF'=0)) %>%
mutate(inpoverty = ifelse((rtotweekpay<weekly_pov_thresh_22), yes=1, no=0), #Create an indicator for folks in poverty
povlevel = round((rtotyearpay/pov_thresh_2022)*100)) %>% #create poverty measure
mutate(noincome = ifelse(rtotweekpay==0, yes=1, no=0)) %>% #count folks w/no income
set_value_labels(noincome = c('No income'= 1, 'With income'= 0)) %>%
#remove 1152 observations in sample that have no ORG weight
filter(!is.na(adj_wgt)) %>%
#write workbook so I can play with data later!
relocate(group_id, faminc, .after = rtotyearpay) %>%
write_csv(here('input/poverty_rate_data.csv'))
View(historic_thresh)
natl_poverty_monthly <- cps_families %>%
group_by(year, month) %>%
summarize(n = n(),
in_poverty = sum(inpoverty * (adj_wgt/12), na.rm=TRUE),
poverty = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE),
urate16_64 = weighted.mean(unemp, w=adj_wgt, na.rm=TRUE)) %>%
mutate(group='Poverty, all',
poverty_earnings='All',
date= as.Date(paste(year, month, 1, sep = "-"), "%Y-%m-%d"))
hist_poverty <- ggplot(aes(x=date, y=poverty), data=natl_poverty)+
theme_light()+
theme(plot.title = element_text(size=16, face="bold.italic"))+
labs(title = 'Historical market based poverty rate', y="Poverty rate", x="Date")+
geom_line(size=1)
#Overall unemployment
overall_urate <- unemp_data %>%
filter(age>=16, lfstat %in% c(1,2), selfemp0==0, selfinc0==0) %>%
group_by(year) %>%
summarize(urate_16plus = weighted.mean(unemp, w=basicwgt/12, na.rm=TRUE))
urate_wbhao <- unemp_data %>%
filter(age>=16, lfstat %in% c(1,2), selfemp0==0, selfinc0==0) %>%
group_by(year, wbhao) %>%
summarize(urate_16plus_wbhao = weighted.mean(unemp, w=basicwgt/12, na.rm=TRUE))
poverty_wbhao_16to64 <- cps_families %>%
group_by(year, wbhao) %>%
summarise(pov_16to64_wbhao = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE)) %>%
left_join(overall_urate) %>%
mutate(wbhao = to_factor(wbhao)) %>%
pivot_wider(id_cols = year, names_from = wbhao, values_from = c(urate_16plus, pov_16to64_wbhao))
poverty_wbhao_16to64 <- cps_families %>%
group_by(year, wbhao) %>%
summarise(pov_16to64_wbhao = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE)) %>%
left_join(overall_urate) %>%
mutate(wbhao = to_factor(wbhao)) %>%
pivot_wider(id_cols = year, names_from = wbhao, values_from = c(urate_16plus, pov_16to64_wbhao))
poverty_wbhao_16to64 <- cps_families %>%
group_by(year, wbhao) %>%
mutate(wbhao = to_factor(wbhao))# %>%
poverty_wbhao_16to64 <- cps_families %>%
group_by(year, wbhao) %>%
mutate(wbhao = to_factor(wbhao)) %>%
summarise(pov_16to64_wbhao = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE)) %>%
left_join(overall_urate) %>%
pivot_wider(id_cols = year, names_from = wbhao, values_from = c(urate_16plus, pov_16to64_wbhao))
View(poverty_wbhao_16to64)
poverty_wbhao_16to64 <- cps_families %>%
group_by(year, wbhao) %>%
mutate(wbhao = to_factor(wbhao)) %>%
summarise(pov_16to64_wbhao = weighted.mean(inpoverty, w=adj_wgt, na.rm=TRUE)) %>%
pivot_wider(id_cols = year, names_from = wbhao, values_from = pov_16to64_wbhao) %>%
left_join(overall_urate)
count(cps_families, group_id)
library(tidyverse)
library(data.table)
library(epiextractr)
library(epidatatools)
library(labelled)
library(here)
library(blsAPI)
library(openxlsx)
library(zoo)
library(ggplot2)
count(cps_families, group_id)
1+1
unique(cps_families$group_id)
crosstab(cps_families, sex, wbhao)
crosstab(cps_families, female, wbhao)
crosstab(cps_families, age, wbhao)
crosstab(cps_families, educ, wbhao)
names(cps_families)
crosstab(cps_families, under18)
names(cps_families)
count(cps_families,year)
2022-1994
28*12
crosstab(cps_families, under18, w=basicwgt/336)
crosstab(cps_families, under18, w=adj_wgt/336)
crosstab(cps_families, year, under18, w=adj_wgt/12)
pop_count <- crosstab(cps_families, year, under18, w=adj_wgt/12)
View(pop_count)
pop_count <- crosstab(cps, year, under18, w=adj_wgt/12)
count(cps, age)
summary(cps$age)
rm(pop_count)
wbhao_popcount <- crosstab(cps, year, wbhao, under18, w=adj_wgt/12)
View(wgt_ratios)
